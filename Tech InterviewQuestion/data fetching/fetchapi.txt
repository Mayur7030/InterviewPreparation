// to get data from internet
// It is 2 step process
// first one is to get status code to check we are getting data or not & convert receiving data into required format like Text, json()
// second step we get our data

// syntax --let promise = fetch(url,[option])

// without options , a get request is sent

let promise = fetch("https://google.com");
promise.then((response) => {
  console.log(response.status);
  return response.json();
});
promise.then((response) => {
  console.log(response);
});


const url = "https://jsonplaceholder.typicode.com/todos";
// let date = document.getElementById("date");

fetch(url)
  .then((data) => data.json())
  .then((json) => {
    inital = " ";
    // for (let key in json) {
    //   console.log(json[key].id)
    //   console.log(json[key].title)
    //   inital += `id: ${json[key].id}` ;
    // }
    for (const element of json) {
      // console.log(`id: ${element.id}, title: ${element.title}`);
      inital += `id: ${element.id}, title: ${element.title}\n  <br>`;
    }
    // console.log(inital, "initial");
    document.getElementById("date").innerHTML = inital;
  });

// date.innerHTML = inital



fetch methods ==>

Post - Used to submit data to be processed to a specified resource. It can also be used to create a new resource.


fetch('https://api.example.com/data', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ key: 'value' })
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

PUT -Used to update a resource or create a new resource if it does not exist at the specified URI.


fetch('https://api.example.com/data/123', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ key: 'new-value' })
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

DELETE -Used to request that a resource be removed or deleted.


fetch('https://api.example.com/data/123', {
  method: 'DELETE'
})
  .then(response => {
    if (response.ok) {
      console.log('Resource deleted successfully');
    } else {
      console.error('Error:', response.status);
    }
  })
  .catch(error => console.error('Error:', error));
