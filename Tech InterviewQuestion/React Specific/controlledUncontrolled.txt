Uncontrolled and controlled component
	       Controlled Component	                                    Uncontrolled Component
Managed by React state	                                 Managed by component's own internal state
evnet handlers update React state                       Not explicit state update, values directly taken from DOM
don't depends on usered()                               commonally useref()
re-renders on state changes
Parent component updates state on user interaction    	Component updates own internal state on user interaction
Data flows from parent component to component	       Data flows within the component
Easier to debug	More                                   difficult to debug
Generally faster as there's less state management	   Generally slower as there's more state management
Less complex code	                                   More complex code
Considered a best practice	                            Considered an alternate approach


A controlled compoenent is a compoenent whose form element (like inout field or checkbox ) are controlled by the state of the application.

Controlled and uncontrolled components are terms commonly used in the context of form elements in React. They describe different approaches to managing and handling the state of form elements.

Controlled Components:
In a controlled component, the form element's value is controlled by the state of the React component. This means that the component maintains the state of the input elements, and any changes to the input values are handled by the React component through state and event handlers.


Characteristic of controlled
1)state control
2)event handling
3)state update
4)re-rendering

Advantages of controlled -
1)form elements have their own value managed by React state, single source of Truth
2)predictable implement feature such as form validation,dynamic rendering
3)better control and maintainability

uncontrolled compoenent
1) when integrating with non react library
2)controlled component are not possible


Example of a Controlled Component:


import React, { useState } from 'react';

const ControlledComponent = () => {
  const [inputValue, setInputValue] = useState('');

  const handleChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <input
      type="text"
      value={inputValue}
      onChange={handleChange}
    />
  );
};
In this example, the input value is controlled by the inputValue state, and any changes to the input trigger the handleChange event handler to update the state.

Uncontrolled Components:
In an uncontrolled component, the form element maintains its own state, and the React component does not manage the value. Instead, the value is directly read from and written to the DOM using refs or other DOM methods.

Example of an Uncontrolled Component:

jsx
Copy code
import React, { useRef } from 'react';

const UncontrolledComponent = () => {
  const inputRef = useRef();

  const handleButtonClick = () => {
    console.log('Input Value:', inputRef.current.value);
  };

  return (
    <div>
      <input type="text" ref={inputRef} />
      <button onClick={handleButtonClick}>Get Value</button>
    </div>
  );
};
In this example, the input value is not controlled by the React component's state. Instead, the value is directly accessed using the inputRef ref when needed.

Choosing Between Controlled and Uncontrolled Components:

Controlled Components: Provide a more React-centric approach, making it easier to manage and validate form data. Useful when you need to perform actions based on the state of the form elements.

Uncontrolled Components: Useful in certain situations where you want to integrate with non-React code or libraries, or when you want to minimize the use of state in your React components.

The choice between controlled and uncontrolled components depends on the specific requirements of your application and the level of control you need over form elements. Controlled components are generally favored in React applications for their predictability and ease of integration with React's overall state management.






