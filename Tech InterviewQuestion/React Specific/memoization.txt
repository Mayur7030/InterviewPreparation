Memorization in JavaScript is an optimization technique that stores the results of function calls in a temporary data structure and then retrieves the results whenever the stored result is needed in the program. This can be used to speed up the execution of a program by avoiding the need to recompute the same results multiple times.


Memorization
Memoization is an optimization technique for accelerating computer programs by caching the results of heavy function calls and returning them when similar inputs are encountered repeatedly. Simply, React memoization is similar to caching.


Usememo(), react.memo(), usecallback()


Drawbacks - If the function being memoized is not called very often, the overhead of memoization may outweigh the benefits.


optimazation in react ==

usememo --
agar koi state change hogi tohi render karega
diff bet useeffect and usememo -
usememo return value (memoize value) of function 
use only when function return value.
2
react.memo --

React.memo is a higher-order component (HOC) provided by React that memoizes the result of a component rendering. It is used to optimize the performance of functional components by preventing unnecessary renders.

code --------------------------------->

import React from 'react';

const MyComponent = React.memo(({ name }) => {
  console.log('Rendering MyComponent');
  return <div>{name}</div>;
});

// Usage
function App() {
  const personName = 'John';

  return (
    <div>
      <MyComponent name={personName} />
    </div>
  );
}


It's important to note that React.memo only performs a shallow comparison of props. If the props are objects or arrays, and their references remain the same, React.memo will consider them unchanged.

---------------------------------------


usememo = function returns value
react.memo =component making pure by passing export in memo
usecallback = return function

