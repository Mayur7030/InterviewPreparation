In javascript, a callback is simply a function that is passed to another function as a parameter and is invoked or executed inside the other function. Here a function needs to wait for another function to execute or return a value and this makes the chain of the functionalities (when X is completed, then Y is executed, and it goes on.). This is the reason callback is generally used in the asynchronous operation of javascript to provide the asynchronous capability.



code--------->

function callback(src, callbackfucntion) {
  const script = document.createElement("script");
  script.src = src;
  script.onload = console.log("script is loaded");
  callbackfucntion(new Error("src is currpted"));
}
let callbackfucntion = (error) => {
 return console.log(error);
};

callback("https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js"
,callbackfucntion);


------------------------->
example 2
----------
const url = "https://jsonplaceholder.typicode.com/todos/1";

const handledata = (error, data) => {
  if (error) {
    console.log("error", error);
  } else {
    console.log("successfull", data);
  }
};

// console.log();

const fetchingdata = (url, callback) => {
  fetch(url)
    // .then((res) => res.json())
    // .then((res) => console.log(res.id));
    .then((res) => {
      if (!res.ok) {
        throw new Error(`network ${res.status}`);
      }
      return res.json();
    })
    .then((data) => {
      callback(null, data);
    })
    .catch((error) => {
      callback(error, null);
    });
};
fetchingdata(url, handledata);
-------------------------------------->

###  problem with callback

  1)Inversion of controls -When your main function invokes the callback function, it basically hands over the program execution to the callback function. In essence, the entire program's flow depends on the response of the callback function, and then it proceeds from there onward.

  2)callback hell or pyramid of doom --
  in callback function chain of functionalities is created like when x is executed then y should execute and so on ,this creates pyramid like structure.



code--------------->
  callback(
    "https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js",if(error){
        console.log(error)
        sendemergencyMessagetoceo()
        return
    }callback(
        "https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js", if(error){
            console.log(error)
            sendemergencyMessagetoceo()
            return
        }
  );


solution to this is PROMISE
