The event loop is a constantly running process that monitors both the callback queue and the call stack.

If the call stack is not empty, the event loop waits until it is empty and places the next function from the callback queue to the call stack. If the callback queue is empty, nothing will happen:

step 1 )Global Execution Context:

When your JavaScript code is executed, a global execution context is created and pushed onto the call stack.

step 2) Execution of Synchronous Code:

The engine starts executing the synchronous code line by line, pushing functions onto the call stack and executing them.

step 3) Asynchronous Operation Encounter:

When an asynchronous operation, such as a setTimeout function, is encountered, it is moved to the Web APIs environment. The Web APIs environment includes the browser's APIs like setTimeout, fetch, and others.

step 4) Callback Queue and Event Loop:

After the timer in setTimeout expires, the callback function is pushed into the callback queue.


step 5) Event Loop Checks the Call Stack:

The event loop constantly checks if the call stack is empty. If it is, it takes the first function from the callback queue and pushes it onto the call stack.

step 6) Execution of Asynchronous Code:

The callback function from the callback queue is executed.

In this example, the microtask queue (Promise,fetch api) has higher priority than the callback queue (setTimeout). Therefore, the Promise is resolved first before the setTimeout callback is executed.
