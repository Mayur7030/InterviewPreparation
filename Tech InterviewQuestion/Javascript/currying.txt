
Function currying is a technique in JavaScript where a function with multiple arguments is transformed into a sequence of functions, each taking only one argument. Instead of calling the function with all the arguments at once, you call it one at a time, creating a chain of partially applied functions.

In simple terms:

Non-Curried Function:

A function that takes all its arguments at once.
javascript
Copy code
function add(a, b, c) {
  return a + b + c;
}

// Usage:
const result = add(1, 2, 3);
console.log(result); // Output: 6
Curried Function:

A function that takes one argument at a time and returns a new function until all arguments are received.
javascript
Copy code
function curryAdd(a) {
  return function(b) {
    return function(c) {
      return a + b + c;
    };
  };
}

// Usage:
const curriedAdd = curryAdd(1)(2)(3);
console.log(curriedAdd); // Output: 6

benefits of currying -
Partial Application:

Benefit: Currying enables partial application, allowing you to fix some arguments of a function and generate a new function that takes the remaining arguments.
Example:
javascript
Copy code
const add = (a, b, c) => a + b + c;
const curryAdd = curry(add);
const addTwoNumbers = curryAdd(1)(2);
console.log(addTwoNumbers(3)); // Output: 6
Code Reusability:

Benefit: Curried functions can be easily reused with different sets of arguments, promoting modular and reusable code.
Example:
javascript
Copy code
const multiply = curry((a, b, c) => a * b * c);
const double = multiply(2);
console.log(double(3)(4)); // Output: 24
Function Composition:

Benefit: Currying facilitates function composition, allowing you to combine simple functions to create more complex ones.
Example:
javascript
Copy code
const compose = (f, g) => (x) => f(g(x));
const addOne = (x) => x + 1;
const multiplyByTwo = (x) => x * 2;
const composedFunction = compose(addOne, multiplyByTwo);
console.log(composedFunction(3)); // Output: 7
Dynamic Function Generation:

Benefit: Currying allows for the dynamic generation of functions based on varying requirements or contexts.
Example:
javascript
Copy code
const greet = curry((greeting, name) => `${greeting}, ${name}!`);
const greetHello = greet('Hello');
console.log(greetHello('John')); // Output: 'Hello, John!'
Readability and Conciseness:

Benefit: Currying can enhance code readability by breaking down complex functions into a series of simpler, focused functions.
Example:
javascript
Copy code
const filter = curry((predicate, list) => list.filter(predicate));
const isEven = (x) => x % 2 === 0;
const filterEvenNumbers = filter(isEven);
Error Handling:

Benefit: Currying can facilitate more granular error handling by validating arguments at each step of the currying process.
Example:
javascript
Copy code
const validateArgs = curry((arg1, arg2) => {
  if (typeof arg1 !== 'number' || typeof arg2 !== 'number') {
    throw new Error('Arguments must be numbers');
  }
  return arg1 + arg2;
});
In summary, currying promotes a more modular, flexible, and reusable approach to writing functions, offering benefits in terms of partial application, code organization, and composability. These advantages make it a valuable technique, particularly in functional programming paradigms.


Infinite currying -
 
function add(a){
  return function(b){
    if(b) return add(a +b);
    return a
  }
}
console.log(add(2)(4)(6)())  //output --12 