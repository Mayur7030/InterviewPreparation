Bouncing and throttling are techniques used to control the frequency of function execution in JavaScript, especially in scenarios where functions are triggered by events such as scrolling, resizing, or typing.


Throttling:

Purpose: Throttling ensures that a function is not executed more often than a specified time interval, regardless of how frequently an event is triggered.
How it works: If a function is called more frequently than the specified interval, throttling will ignore some of those calls until the time interval has passed.
Use Case: Throttling is often used for performance optimization in scenarios where continuous or frequent triggering of an event (like scrolling or mousemove) might lead to resource-intensive operations.
Implementation: Throttling typically involves setting a timer, and if the function is called before the timer expires, the function call is ignored until the timer resets.
ex - resize text, search input, autosave in text editors

Debouncing:

Purpose: Debouncing ensures that a function is not executed until after a certain amount of time has passed since the last time the function was invoked.
How it works: If the function is called multiple times within a short period, debouncing will reset a timer each time it is called. The function is only executed when the timer expires without further function calls.
Use Case: Debouncing is often used to improve performance and reduce unnecessary processing in scenarios where you want to wait for a pause in user input before taking action.
Implementation: Debouncing typically involves using a timer and clearing the timer each time the function is called within a specified time frame.


ex - scroll event, button click, mouse move event